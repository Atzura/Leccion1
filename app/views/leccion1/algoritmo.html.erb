<div class="row">
	<div class="eleven columns centered fondo">
		<div class="row"> 
			<div class="twelve columns centered">
				<h1 class="Three-Dee">ALGORITMO</h1>
			</div>
		</div>
		<div class="row">
			<div class="eleven columns centered">
		<dl class="tabs contained">
  			<dd class="active"><a href="#definicion" class="letrachica">1.1</a></dd>
  			<dd class="hide-for-small"><a href="#caracteristicas">1.2</a></dd>
  			<dd class="hide-for-small"><a href="#estructura">1.3</a></dd>
  			<dd class="hide-for-small"><a href="#datos">1.4</a></dd>
  			<dd class="hide-for-small"><a href="#expresiones">1.5</a></dd>
  			<dd class="hide-for-small"><a href="#diseño">1.6</a></dd>
  			<dd class="hide-for-small"><a href="#representacion">1.7</a></dd>
		</dl>
		
		
			
        		<ul class="tabs-content contained">
					<li class="active" id="definicionTab">
					<div class="row">
						<div class="ten columns centered fondoblanco">
						 	<p><h4>
						 		<br /><br />
						 		Un algoritmo es un método para resolver un problema mediante una serie de pasos, precios, definidos y finitos.<br />
								La resolución de un problema exige el diseño de un algoritmo que resuelva el problema propuesto. Los pasos para la resolución de un problema son:<br /><br />
									1.	Diseño del algoritmo, que describe la secuencia ordenada de pasos -sin ambigüedades- que conducen a la solución de un problema dado.<br />
									2.	Expresar el algoritmo como un programa en un lenguaje de programación adecuado.<br />
									3.	Ejecución y validación del programa por la computadora.<br /><br />
								Para llegar a realizar un programa es necesario el diseño previo de un algoritmo, de modo que sin el algoritmo no pueda existir un programa. Los algoritmos son independientes tanto del lenguaje de programación en que se expresan como de la computadora que los ejecuta. En cada problema el algoritmo se puede expresar en un lenguaje diferente de programación y ejecutarse en una computadora distinta; sin embargo, el algoritmo será siempre el mismo. <br />
								En la ciencia de la programación y computación, los algoritmos son más importantes que los lenguajes de programación o las computadoras. Un lenguaje de programación es tan sólo un medio para expresar un algoritmo y una computadora es sólo un procesador para ejecutarlo. Tanto el lenguaje de programación como la computadora son los medios para obtener un fin: conseguir que el algoritmo se ejecute y se efectué el proceso correspondiente.
						 	</h4></p>
						</div>
					</div>	
				</li>
  			
  					<li id="caracteristicasTab">
  					<div class="row">
						<div class="ten columns centered fondoblanco">
							<p><h4>
							<br /><br />
							Las características fundamentales que debe cumplir todo algoritmo son:<br /><br />
								•	Un algoritmo debe ser preciso e indicar el orden de realización de cada paso.<br />
								•	Un algoritmo debe de estar definido. Si se sigue un algoritmo dos veces, se debe obtener el mismo resultado cada vez.<br />
								•	Un algoritmo debe ser finito. Si se sigue un algoritmo, se debe terminar en algún momento; o sea, debe tener un numero finito de pasos.<br /><br />
							La definición de un algoritmo debe describir tres partes: Entrada, Proceso y Salida. En un ejemplo en un algoritmo de receta de cocina se tendrá:<br /><br />
								Entrada: ingredientes y utensilios empleados.<br />
								Proceso: elaboración de la receta en la cocina.<br />
								Salida: terminación del plato (por ejemplo, cordero).<br />
							</h4></p>
							<a class="round button colorboton" id="btonejem1algo" href="#"> EJEMPLO 1.2.1 </a>
							<a class="round button colorboton" id="btonejem2algo" href="#"> EJEMPLO 1.2.2 </a>	 
						</div>
					</div>	
  				</li>
  			
  					<li id="estructuraTab">
  					<div class="row">
						<div class="ten columns centered fondoblanco">
						 	<p><h4>
						 	<br /><br />
						 	El sistema para describir (<<escribir>>) un algoritmo consiste en realizar una descripción paso a paso con un lenguaje natural del citado algoritmo. Al hacer un algoritmo existen ciertas palabras reservadas; estas palabras describen las estructuras de control fundamentales y procesos de toma de decisión en el algoritmo. Estas incluyen  los conceptos importantes de selección (expresadas por si-entonces-si_no if-then-else) y de repetición (expresadas con mientras-hacer o a veces repetir-hasta e iterar-fin_iterar, en ingles, while-do  repeat-until) que se encuentran en casi todos los algoritmos, especialmente los de proceso o datos. La capacidad de decisión permite seleccionar alternativas de acciones a seguir o bien la repetición una y otra vez de operaciones básicas. <br /><br />
							Otras palabras reservadas son: inicio, fin, fin_si, mientras, hacer, hasta que, entre otras.
						</h4></p>
						</div>
					</div>	
  				</li>
  			
  					<li id="datosTab">
  				<div class="row">
					<div class="ten columns centered fondoblanco">
						<p><h4>
							<br /><br />
							Un dato es la expresión general que describe los objetos con los cuales opera una computadora. La mayoría de las computadoras pueden trabajar con varios tipos (modos) de datos. Los algoritmos y los programas correspondientes operan sobre estos tipos de datos. <br /> <br />
							La acción de las instrucciones ejecutables de las computadoras se reflejan en cambios en los valores de las partidas de datos. Los datos de entrada se transforman por el programa, después de las etapas intermedias, en datos de salida.<br /> 					          
							En el proceso de resolución de problemas el diseño de la estructura de datos es tan importante como el diseño del algoritmo y del programa que se basa en el mismo. <br /><br />
							Existen dos tipos de datos: simples (sin estructura) y compuestos (estructurados). Los datos estructurados son conjuntos de partidas de datos simples con relaciones definidas entre ellos. <br /> <br />
							Los distintos tipos de datos se representan en diferentes formas en la computadora. A nivel de máquina, un dato es un conjunto o secuencia de bits (dígitos 0 o 1).  Los tipos de datos simples son los siguientes:
							<br /><br />
							Numéricos (integer, real) <br />
							Lógicos (boolean)<br />
							Carácter (char, string)
						</h4></p> 
						<a class="round button colorboton" id="btondatonum" href="#"> NUMERICOS </a>
						<a class="round button colorboton" id="btondatolog" href="#"> LOGICOS </a>
						<a class="round button colorboton" id="btondatocad" href="#"> CARACTER </a>
					</div>
				</div>	
  			</li>
  			
  					<li id="expresionesTab">
  				<div class="row">
					<div class="ten columns centered fondoblanco">
						<p><h4>
							<br /><br />
							Las expresiones sin combinaciones de constantes, variables, símbolos de operación, paréntesis y nombres de funciones especiales. Las mismas ideas son utilizadas en notación matemática tradicional; por ejemplo: <br /><br />
							a + (b + 3) + √c <br /><br />
							Aquí los paréntesis indican el orden de cálculo y √ representa la función raíz cuadrada. <br />
							Cada expresión toma un valor que se determina tomando los valores de las variables y constantes implicadas y la ejecución de las operaciones indicadas. Una expresión consta de operandos y operadores. Según sea el tipo de objetos que manipulan, las expresiones se clasifican en: <br /><br />

							•	Aritméticas,<br />
							•	Relacionales, <br />
							•	Lógicas,<br />
							•	Carácter.<br /><br />

							El resultado de la expresión aritmética es de tipo numérico; el resultado de la expresión relacional y de una expresión lógica es de tipo lógico; el resultado de una expresión carácter es de tipo carácter.
						</h4></p> 
						<a class="round button colorboton" id="btonreglasprio" href="#"> REGLAS </a>
						<a class="round button colorboton" id="btonejem3algo" href="#"> EJEMPLO 1.5.1 </a>
						<a class="round button colorboton" id="btonejem4algo" href="#"> EJEMPLO 1.5.2 </a>
					</div>
				</div>	
  			</li>
  			
  					<li id="diseñoTab">
  				<div class="row">
					<div class="ten columns centered fondoblanco">
						<p><h4>
							<br /><br />
							Una computadora no tiene capacidad para solucionar problemas más que cuando se le proporcionan los pasos a realizar. Estos pasos sucesivos pueden indicar las instrucciones a ejecutar por la maquina constituyen, el algoritmo. <br /><br />
							La información proporcionada al algoritmo constituye su entrada y la información producida por el algoritmo constituye su salida.<br /><br />
							Los problema complejos se pueden resolver más eficientemente con la computadora cuando se rompen en subproblemas que sean más fáciles de solucionar que el  original. Este método es conocido como divide y vencerás (divide and conquer) y consiste en dividir un problema complejo en otros más simples. <br /><br />

							La descomposición del problema original en subproblemas más simples y a continuación dividir estos subproblemas en otros más simples que pueden ser implementados para su solución en la computadora se denomina diseño ascendente (top-down desing).
							Las ventajas más importantes del diseño descendente son: <br /><br /> 

							•	El problema se comprende más fácilmente al dividirse en partes más simples denominados módulos. <br /> 
							•	Las modificaciones en los módulos son más fáciles.<br />
							•	La comprobación del problema se puede verificar fácilmente. <br /><br />

							Es recomendable representar el algoritmo mediante una determinada herramienta de programación: diagrama de flujo, pseudocódigo o diagrama N-S.
						</h4></p> 
						<a class="round button colorboton" id="btonejem5algo" href="#"> EJEMPLO 1.6.1 </a>
					</div>
				</div>	
  			</li>
  			
  					<li id="representacionTab">
  				<div class="row">
					<div class="ten columns centered fondoblanco">
						<p><h4>
							<br /><br />
							Para representar un algoritmo se debe de utilizar algún método que permita independizar dicho algoritmo del lenguaje de programación elegido. Ello permitirá que un algoritmo pueda ser codificado indistintamente en cualquier lenguaje. Los métodos usuales para representar un algoritmo son: <br /><br />
							1. Diagramas de flujo.<br />
							2. Diagramas N-S (Nasi-Schneiderman). <br />
							3. Lenguaje de especificación de algoritmos: pseudocódigo.<br />
							4. Lenguaje español, inglés <br />
							5. Fórmulas <br /> <br />

							Los métodos 4 y 5 no suelen ser fáciles de transformar en programas. Una descripción en español narrativo no es satisfactoria, ya que es demasiado prolija y generalmente ambigua. Una fórmula, sin embargo, es buen sistema de representación. Por ejemplo, las fórmulas para la solución de una ecuación cuadrática (de segundo grado) es un medio sucinto de expresar el procedimiento algorítmico que se debe ejecutar para obtener las raíces de dicha ecuación. <br /><br />

							x1=(-b+√((b^2 )-4ac))/2a <br />  
							x2=(-b-√((b^2 )-4ac))/2a<br /><br />
							y significa lo siguiente:<br /> <br />
							1. Eleve al cuadrado b.<br />
							2. Toma a; multiplicar por c; multiplicar por 4 <br />
							3. Reste el resultado obtenido de 2 del resultado de 1 etc.<br />
							Sin embargo, no es  frecuente que un algoritmo pueda ser expresado por medio de una simple formula.<br />
							Las herramientas más utilizadas para diseñar algoritmos son: diagramas de flujo, diagramas N-S  y pseudocódigos. 
						</h4></p>
						<a class="round button colorboton" id="btondiaflujoalgo" href="#"> D.FLUJO </a>
						<a class="round button colorboton" id="btonejem6algo" href="#"> EJEMPLO 1.7.1 </a>
						<a class="round button colorboton" id="btonejem7algo" href="#"> EJEMPLO 1.7.2 </a>
						<a class="round button colorboton" id="btondiaNSalgo" href="#"> N-S </a>
						<a class="round button colorboton" id="btonejem8algo" href="#"> EJEMPLO 1.7.3 </a>
					</div>
				</div>	
  			</li>
		
				</ul>
			</div>
		</div>
	</div>
</div>
